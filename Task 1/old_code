#!/bin/python3

"""
Created on Mon Jan 27 14:06:14 2025

@author: natalia
"""

from mpi4py import MPI

comm = MPI.COMM_WORLD

nproc = comm.Get_size()
# The first processor is leader, so one fewer available to be a worker
nworkers = nproc - 1

# samples
N = 100000
DEL = 1.0 / N

# integral
INT = 0.0


def integrand(x_i):
    """Program is for ... . It requires ... ."""
    return 4.0 / (1.0 + x_i*x_i)


if comm.Get_rank() == 0:

    # Leader: choose points to sample function, send to workers and
    # collect their contributions. Also calculate a sub-set of points.

    for i in range(0, N):

        # decide which rank evaluates this point
        j = i % nproc

        # mid-point rule
        x = (i+0.5) * DEL

        if j == 0:
            # so do this locally using the leader machine
            y = integrand(x) * DEL
        else:
            # communicate to a worker
            comm.send(x, dest=j)
            y = comm.recv(source=j)

        INT += y

        # Shut down the workers
        for i in range(1, nproc):
            comm.send(-1.0, dest=i)

        print("Integral %.10f" % INT)

    else:
        # Worker: waiting for something to happen, then stop if sent message
        # outside the integral limits

        while True:

            x = comm.recv(source=0)

            if x < 0.0:
                # stop the worker
                break
        comm.send(integrand(x) * DEL, dest=0)
