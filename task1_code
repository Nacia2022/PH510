#!/bin/python3

"""
Created on Mon Jan 27 14:06:14 2025

@author: natalia
"""

# Importing MPI module to eneable parallel processing
from mpi4py import MPI

# Initializing communication in MPI
comm = MPI.COMM_WORLD
rank = comm.Get_rank()  # Get the process rank
size = comm.Get_size()  # Get the total number of processes

# Get the total number of ranks
nproc = comm.Get_size()

# The first processor is leader (rank 0), so one fewer available to be a worker
nworkers = nproc - 1

# Integral parameters
N = 100000  # Number of steps for integration
DEL = 1.0 / N  # Step size
INT = 0.0  # Integral


# Define function
def integrand(x_i):
    """Program to integrate the function to obtain the value of pi."""
    return 4.0 / (1.0 + x_i*x_i)

# NEW VERSION
# Divide work (N) amoung the ranks so that each calculates a partial sum of the integral
DIV_N = N // size
start = rank * DIV_N
end = start + DIV_N

# Divides integral sum
DIV_INT = 0.0  # Initialize
for i in range(start, end):
    x = (i+0.5) *DEL
    DIV_INT += integrand(x) * DEL

# Combine all partial sums
TOTAL_INT = comm.reduce(DIV_INT, op=MPI.SUM, root=0)

# Print result from rank 0
if rank == 0:
    print(f"Integral = {TOTAL_INT:.15f}")

# PREVIOUS VERSION
# Check if process is rank 0
# if comm.Get_rank() == 0:

    # Leader: choose points to sample function, send to workers and
    # collect their contributions. Also calculate a sub-set of points.

#    for i in range(0, N):

        # decide which rank evaluates this point
#        j = i % nproc

        # mid-point rule
#        x = (i+0.5) * DEL

#        if j == 0:
            # so do this locally using the leader machine
#            y = integrand(x) * DEL
#        else:
            # communicate to a worker - send work to workers
#            comm.send(x, dest=j)  # Send work to process j
#            y = comm.recv(source=j)  # Retrieve result from j

#    INT += y  # Rank 0 accumulates integral result

    # Shut down the workers
#    for i in range(1, nproc):
#        comm.send(-1.0, dest=i)

    # Print value of integral to 15 significant figures (pi approximation)
#    print(f"Integral {INT:.15f}")


# Worker: waiting for something to happen, then stop if sent message
# outside the integral limits

# else:
#    while True:
#        x = comm.recv(source=0)

#        if x < 0.0:
            # stop the worker
#            break
#        comm.send(integrand(x) * DEL, dest=0)

# MPI.Finalize()
